---
import type { GetStaticPaths } from "astro";
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.tsx";
import Footer from "../../components/Footer.astro";
import MobilePagination from "../../components/MobilePagination.astro";
import DesktopPagination from "../../components/DesktopPagination.astro";
import {
  getAllPostsSorted,
  convertHTMLToPlainText,
  getFormattedDate,
  getPageOfPosts,
  getPagesStaticPaths,
  getPagination,
  getReadingTime,
} from "../../lib/helpers";
import { NO_OF_WORDS_IN_EXCERT } from "../../lib/constants";

const sortedPosts = await getAllPostsSorted();
const totalPosts = sortedPosts.length;

export const getStaticPaths = (async () => {
  const paths = getPagesStaticPaths(totalPosts);

  return paths.map((pageNum) => ({ params: { pageNum } }));
}) satisfies GetStaticPaths;

const { pageNum }: { pageNum: string } = Astro.params;
const pageNumInt = parseInt(pageNum ?? "1", 10);
const pagePosts = getPageOfPosts(sortedPosts, pageNumInt);
const postsWithExtras = pagePosts.map((post) => {
  const plainText = convertHTMLToPlainText(post.rendered?.html ?? "");
  const excerpt = plainText.split(" ").slice(0, NO_OF_WORDS_IN_EXCERT).join(" ");
  const readingTime = getReadingTime(plainText);

  return {
    excerpt,
    readingTime,
    ...post,
  };
});
const { currentPage, noOfPages } = getPagination(pageNumInt, totalPosts);
const { href } = Astro.url;
---

<Layout title="About John Tsevdos" description="Blog" url={href}>
  <Header client:load />

  <div class="container mx-auto px-4 py-16 lg:px-8 xl:max-w-7xl">
    <!-- Heading -->
    <header>
      <h1 class="mb-2 text-4xl font-black text-black dark:text-white">Latest Posts ✍</h1>
      <h2 class="text-2xl font-medium leading-relaxed mb-8 text-gray-700 dark:text-gray-300">Sharing ideas and code</h2>
    </header>
    <!-- END Heading -->

    <!-- Blog Posts -->
    <div class="space-y-4 sm:space-y-10">
      {
        postsWithExtras.map(({ id, data, excerpt, readingTime }) => {
          const { title, date, categories } = data;

          return (
            <div class="flex flex-col overflow-hidden rounded-lg bg-white shadow-xs lg:flex-row dark:bg-gray-800">
              <a
                href={`/blog/${categories[0]}/${id}`}
                class="group relative block w-full overflow-hidden lg:w-2/5 xl:w-1/3"
              >
                <div class="absolute inset-0 flex items-center justify-center bg-blue-700/75 opacity-0 transition duration-150 ease-out group-hover:opacity-100">
                  <svg
                    class="hi-solid hi-arrow-right inline-block size-10 -rotate-45 text-white"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                    aria-hidden="true"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M3 10a.75.75 0 01.75-.75h10.638L10.23 5.29a.75.75 0 111.04-1.08l5.5 5.25a.75.75 0 010 1.08l-5.5 5.25a.75.75 0 11-1.04-1.08l4.158-3.96H3.75A.75.75 0 013 10z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </div>
                <Image src="https://public.tsevdos.me/ph-800-600.png" alt="test" inferSize={true} />
              </a>
              <div class="w-full p-6 lg:w-3/5 lg:self-center lg:px-10 lg:py-8 xl:w-2/3">
                {/* <div class="mb-3 inline-flex flex-wrap items-center gap-1">
                    {tags.map((tag) => {
                      return (
                        <div class="inline-flex rounded-full bg-blue-100 px-1 py-0.5 text-xs leading-4 font-semibold text-blue-800 dark:bg-blue-900/75 dark:text-blue-200">
                          <div class="inline-flex rounded-full bg-blue-100 px-1 py-0.5 text-xs leading-4 font-semibold text-blue-800 dark:bg-blue-900/75 dark:text-blue-200">
                            {tag}
                          </div>
                        </div>
                      );
                    })}
                  </div> */}
                <div class="mb-3 inline-flex flex-wrap items-center gap-1">
                  {categories.map((tag) => {
                    return (
                      <div class="inline-flex rounded-full bg-blue-100 px-1 py-0.5 text-xs leading-4 font-semibold text-blue-800 dark:bg-blue-900/75 dark:text-blue-200">
                        <div class="inline-flex rounded-full bg-blue-100 px-1 py-0.5 text-xs leading-4 font-semibold text-blue-800 dark:bg-blue-900/75 dark:text-blue-200">
                          {tag}
                        </div>
                      </div>
                    );
                  })}
                </div>
                <h4 class="mb-2 text-lg font-bold sm:text-xl">
                  <a
                    href={`/blog/${categories[0]}/${id}`}
                    class="leading-7 text-gray-800 hover:text-gray-600 dark:text-gray-200 dark:hover:text-gray-400"
                  >
                    {title}
                  </a>
                </h4>
                <p class="mb-3 text-sm text-gray-600 dark:text-gray-400">
                  <span class="font-medium">{getFormattedDate(date)}</span> · {readingTime} min read
                </p>
                <p class="leading-relaxed text-gray-600 dark:text-gray-400">{excerpt}...</p>
              </div>
            </div>
          );
        })
      }
    </div>
    <!-- END Blog Posts -->

    <!-- Card Footer -->
    <div class="grow border-t border-gray-200 py-5 dark:border-gray-700">
      <!-- Pagination -->
      <div class="text-center dark:text-gray-100">
        <MobilePagination currentPage={currentPage} noOfPages={noOfPages} totalPosts={totalPosts} />
        <DesktopPagination currentPage={currentPage} noOfPages={noOfPages} totalPosts={totalPosts} />
      </div>
      <!-- END Pagination -->
    </div>
    <!-- END Card Footer -->
  </div>
  <!-- END Blog List Section: Full Width -->

  <Footer />
</Layout>
